using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Diagnostics;

namespace _LFP_Proyecto2_201504325
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        //Variables Globales
        string UErr = null;
        string UTkn = null;
        int Siguiente = 2;
        int actual = 0;
        int commult = 0;
        int fila = 1;
        int indice = 0;
        int cuentaerr = 0;
        int errskp = 0;
        int atu = 0;
        int corfin = 0;
        int corini = 0;
        int dobcor = 0;
        int comini = 0;
        int seccom = 0;
        int secgram = 0;
        int secres = 0;
        OpenFileDialog Arch = new OpenFileDialog();
        SaveFileDialog SV_Arch = new SaveFileDialog();
        TabPage Pestana_Extra;
        RichTextBox Entrada_Extra;
        List<TabPage> Pestanas = new List<TabPage>();
        List<RichTextBox> Entrs = new List<RichTextBox>();
        List<string> ComoLex = new List<string>();
        List<string> Termi = new List<string>();
        List<string> IniTerm = new List<string>();
        List<string> ResIniTer = new List<string>();
        List<string> NoTermi = new List<string>();
        List<string> Tkns = new List<string>();
        List<int> Id_Tkn = new List<int>();
        List<string> Lex_Tkns = new List<string>();
        List<int> Fil_Tkns = new List<int>();
        List<int> Col_Tkns = new List<int>();
        List<string> Err = new List<string>();
        List<string> Tip_Err = new List<string>();
        List<int> Fil_Err = new List<int>();
        List<int> Col_Err = new List<int>();
        List<string> Desc_Err = new List<string>();

        //Abre la nueva entrada en la pestaña actual
        private async void Abrir_Archivo_Click(object sender, EventArgs e)
        {
            Arch.Filter = "lfp| *.lfp";
            Arch.ValidateNames = true;
            Arch.Multiselect = false;
            if (Arch.ShowDialog() == DialogResult.OK)
            {
                StreamReader Cod = new StreamReader(Arch.FileName);
                actual = Entradas.SelectedIndex;
                Entrs[actual].Text = await Cod.ReadToEndAsync();
            }

        }

        //Crea una nueva pestaña
        private void Nuevo_Archivo_Click(object sender, EventArgs e)
        {
            Pestana_Extra = new TabPage();
            Entrada_Extra = new RichTextBox();
            Pestana_Extra.Text = "Archivo " + Siguiente.ToString();
            Entrada_Extra.SetBounds(0, 0, 539, 454);
            Pestana_Extra.Controls.Add(Entrada_Extra);
            Entrada_Extra.ForeColor = Color.DarkRed;
            Entrada_Extra.BackColor = Color.Black;
            Entradas.Controls.Add(Pestana_Extra);
            Siguiente++;
            Pestanas.Add(Pestana_Extra);
            Entrs.Add(Entrada_Extra);
        }

        //Guarda el archivo de la pestaña actual
        private void Guardar_Archivo_Click(object sender, EventArgs e)
        {
            actual = Entradas.SelectedIndex;
            SV_Arch.Filter = "lfp| *.lfp";
            SV_Arch.Title = "Guardar Archivo";
            if (SV_Arch.ShowDialog() == DialogResult.OK && SV_Arch.FileName.Length > 0)
            {
                StreamWriter Guard = new StreamWriter(File.Create(SV_Arch.FileName));
                Guard.Write(Entrs[actual].Text);
                Guard.Close();
                SV_Arch.FileName = "";
            }
            MessageBox.Show("Se guardo el Archivo");
        }

        private void Analizar_Click(object sender, EventArgs e)
        {
            Tkns.Clear();
            Id_Tkn.Clear();
            Lex_Tkns.Clear();
            Fil_Tkns.Clear();
            Col_Tkns.Clear();
            Err.Clear();
            Fil_Err.Clear();
            Col_Err.Clear();
            Desc_Err.Clear();
            NoTermi.Clear();
            IniTerm.Clear();
            Termi.Clear();
            ComoLex.Clear();
            ResIniTer.Clear();
            atu = 0;
            actual = Entradas.SelectedIndex;
            string[] codigo = Entrs[actual].Lines;
            for (int ini = 0; ini < codigo.Length; ini++)
            {
                Analizador_Lexico(codigo[ini]);
            }
            Analizador_Sintactico(Tkns);
            Analizador_Semantico();
            MessageBox.Show("Termino el análisis");
        }

        //Abre la página de Tokens
        private void Tokens_Click(object sender, EventArgs e)
        {
            UTkn = Ubi_Tkn();
            Pag_Tkns(UTkn, Tkns, Lex_Tkns, Id_Tkn, Fil_Tkns, Col_Tkns);
            MessageBox.Show("Se creo el archivo de tokens");
            if (UTkn != null)
            {
                Process.Start(UTkn);
            }
        }

        //Abre la pagina de Errores
        private void Errores_Click(object sender, EventArgs e)
        {
            UErr = Ubi_Err();
            Pag_Err(UErr, Err, Tip_Err, Desc_Err, Fil_Err, Col_Err);
            MessageBox.Show("Se creo el archivo de errores");
            if (UErr != null)
            {
                Process.Start(UErr);
            }
        }

        private void Graficar_Click(object sender, EventArgs e)
        {

        }

        //Creador de la pagina de tokens
        private void Pag_Tkns(string @ubicacion, List<string> Tokens, List<string> Lexemas, List<int> ID, List<int> Fila, List<int> Columna)
        {
            FileStream escribir = File.Create(@ubicacion);
            Byte[] etiqueta;
            etiqueta = new UTF8Encoding(true).GetBytes("<html>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<head>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<title>Tokens</title>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<meta http-equiv='Content-Type' content='text/html; charset=UTF-8'>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<style>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("table, th, td{");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("        border: 1px solid Black;");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("        border-collapse: collapse;");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("}");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("th, td{");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("       padding: 6px");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("}");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("</style>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("</head>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<body> ");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<H1><CENTER><FONT FACE='Baskerville Old Face' COLOR='Black'><B>Listado de Tokens</B></FONT</CENTER></H1>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<CENTER>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TABLE>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TR>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TH BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE=4 COLOR='White'><B>No.</B></FONT></TH>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TH BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE=4 COLOR='White'><B>Token</B></FONT></TH>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TH BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE=4 COLOR='White'><B>Lexema</B></FONT></TH>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TH BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE=4 COLOR='White'><B>ID</B></FONT></TH>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TH BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE=4 COLOR='White'><B>Fila</B></FONT></TH>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TH BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE=4 COLOR='White'><B>Columna</B></FONT></TH>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("</TR>");
            escribir.Write(etiqueta, 0, etiqueta.Length);

            for (int a = 0; a < Tokens.Count; a++)
            {
                if (a % 2 != 0)
                {
                    etiqueta = new UTF8Encoding(true).GetBytes("<TR>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE=3 COLOR='White'>" + (a + 1) + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE=3 COLOR='White'>" + Tokens[a] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE=3 COLOR='White'>" + Lexemas[a] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE=3 COLOR='White'>" + ID[a] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE=3 COLOR='White'>" + Fila[a] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE=3 COLOR='White'>" + Columna[a] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("</TR>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);

                }
                else
                {
                    etiqueta = new UTF8Encoding(true).GetBytes("<TR>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE=3 COLOR='Black'>" + (a + 1) + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE=3 COLOR='Black'>" + Tokens[a] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE=3 COLOR='Black'>" + Lexemas[a] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE=3 COLOR='Black'>" + ID[a] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE=3 COLOR='Black'>" + Fila[a] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE=3 COLOR='Black'>" + Columna[a] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("</TR>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                }
            }

            etiqueta = new UTF8Encoding(true).GetBytes("</TABLE>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("</CENTER>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("</BODY>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("</HTML>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            escribir.Close();
        }

        //Creador de la pagina de errores
        public void Pag_Err(string @ubicacion, List<string> Error, List<string> Tipo, List<string> Descripcion, List<int> Fila, List<int> columna)
        {
            FileStream escribir = File.Create(@ubicacion);
            Byte[] etiqueta;
            etiqueta = new UTF8Encoding(true).GetBytes("<html>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<head>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<title>Listado de Errores</title>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<meta http-equiv='Content-Type' content='text/html; charset=UTF-8'>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<style>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("table, th, td{");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("        border: 1px solid Black;");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("        border-collapse: collapse;");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("}");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("th, td{");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("       padding: 6px");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("}");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("</style>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("</head>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<body>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<H1><CENTER><FONT FACE='ARIAL' COLOR='Black'><B>Listado de Errores</B></FONT</CENTER></H1>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<CENTER>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TABLE>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TR>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TH BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE=4 COLOR='Black'><B>No.</B></FONT></TH>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TH BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE=4 COLOR='Black'><B>Error</B></FONT></TH>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TH BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE=4 COLOR='Black'><B>Tipo</B></FONT></TH>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TH BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE=4 COLOR='Black'><B>Descripcion</B></FONT></TH>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TH BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE=4 COLOR='Black'><B>Fila</B></FONT></TH>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("<TH BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE=4 COLOR='Black'><B>Columna</B></FONT></TH>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("</TR>");
            escribir.Write(etiqueta, 0, etiqueta.Length);

            for (int b = 0; b < Error.Count; b++)
            {
                if (b % 2 != 0)
                {
                    etiqueta = new UTF8Encoding(true).GetBytes("<TR>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE = 3 COLOR='Black'>" + (b + 1) + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE = 3 COLOR='Black'>" + Error[b] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE = 3 COLOR='Black'>" + Tipo[b] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE = 3 COLOR='Black'>" + Descripcion[b] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE = 3 COLOR='Black'>" + Fila[b] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='White'><FONT FACE='Baskerville Old Face' SIZE = 3 COLOR='Black'>" + columna[b] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("</TR>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                }
                else
                {
                    etiqueta = new UTF8Encoding(true).GetBytes("<TR>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE = 3 COLOR='White'>" + (b + 1) + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE = 3 COLOR='White'>" + Error[b] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE = 3 COLOR='White'>" + Tipo[b] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE = 3 COLOR='White'>" + Descripcion[b] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE = 3 COLOR='White'>" + Fila[b] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("<TD BGCOLOR='Black'><FONT FACE='Baskerville Old Face' SIZE = 3 COLOR='White'>" + columna[b] + "</FONT></TD>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                    etiqueta = new UTF8Encoding(true).GetBytes("</TR>");
                    escribir.Write(etiqueta, 0, etiqueta.Length);
                }
            }

            etiqueta = new UTF8Encoding(true).GetBytes("</TABLE>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("</CENTER>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("</BODY>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            etiqueta = new UTF8Encoding(true).GetBytes("</HTML>");
            escribir.Write(etiqueta, 0, etiqueta.Length);
            escribir.Close();
        }

        //Asignador de la ubicacion de tokens
        public string Ubi_Tkn()
        {
            string ubicacion = null;

            SV_Arch.Filter = "Archivo HTML(*.html)|*.html";

            if (SV_Arch.ShowDialog() == DialogResult.OK)
            {
                ubicacion = SV_Arch.FileName;
            }

            return ubicacion;
        }

        //Asignador de la ubicacion de errores
        public string Ubi_Err()
        {
            string ubicacion = null;

            SV_Arch.Filter = "Archivo HTML(*.html)|*.html";

            if (SV_Arch.ShowDialog() == DialogResult.OK)
            {
                ubicacion = SV_Arch.FileName;
            }

            return ubicacion;
        }

        //Asigna las pestañas iniciales a la lista
        private void Form1_Load(object sender, EventArgs e)
        {
            Pestanas.Add(Archivo_1);
            Entrs.Add(Entrada_1);
        }

        //Analizador Lexico
        private void Analizador_Lexico(string Codigo)
        {
            List<string> toks = new List<string>();
            List<string> lexs = new List<string>();
            string[] info;
            string[] infol;
            string aux = "";
            string pal = "";
            int posicion = 0;
            int columna = 1;
            int estado = 0;
            bool cond = false;
            bool corch = false;
            bool comm = false;
            int comsim = 0;
            int comdobl = 0;
            while (posicion < Codigo.Length)
            {
                switch (estado)
                {
                    case 0:
                        if (Codigo[posicion] == '[')
                        {
                            estado = 1;
                        } else if (Codigo[posicion] == ']')
                        {
                            estado = 2;
                        } else if (Codigo[posicion] == '$')
                        {
                            estado = 5;
                        } else if (Codigo[posicion] == ':')
                        {
                            estado = 6;
                        } else if (Codigo[posicion] == '=')
                        {
                            estado = 7;
                        } else if (Codigo[posicion] == '+')
                        {
                            estado = 8;
                        } else if (Codigo[posicion] == '*')
                        {
                            estado = 9;
                        } else if (Codigo[posicion] == '?')
                        {
                            estado = 10;
                        } else if (Codigo[posicion] == '.')
                        {
                            estado = 11;
                        } else if (Codigo[posicion] == '|')
                        {
                            estado = 12;
                        } else if (Codigo[posicion] == 39 /*comilla simple*/)
                        {
                            estado = 13;
                        } else if (Codigo[posicion] == '"')
                        {
                            estado = 14;
                        } else if (Codigo[posicion] == '(')
                        {
                            estado = 15;
                        } else if (Codigo[posicion] == ')')
                        {
                            estado = 16;
                        } else if (Codigo[posicion] == ',')
                        {
                            estado = 17;
                        } else if (Codigo[posicion] == '{')
                        {
                            estado = 18;
                        } else if (Codigo[posicion] == '}')
                        {
                            estado = 19;
                        } else if (Codigo[posicion] == '<')
                        {
                            estado = 20;
                        } else if (Codigo[posicion] == '>')
                        {
                            estado = 21;
                        } else if (Codigo[posicion] == '-')
                        {
                            estado = 22;
                        } else if (Codigo[posicion] == '#')
                        {
                            estado = 23;
                        } else if ((65 <= Codigo[posicion] && Codigo[posicion] <= 90) || (97 <= Codigo[posicion] && Codigo[posicion] <= 122) || Codigo[posicion] == 164 || Codigo[posicion] == 165 || comsim == 1 || commult == 1)
                        {
                            estado = 26;
                        } else if (48 <= Codigo[posicion] && Codigo[posicion] <= 57)
                        {
                            estado = 27;
                        } else if (Codigo[posicion] == 32)
                        {
                            posicion++;
                        } else if (Codigo[posicion] == '\t')
                        {
                            posicion++;
                        }
                        else
                        {
                            Err.Add(Codigo[posicion].ToString());
                            Tip_Err.Add("Error Léxico");
                            Fil_Err.Add(fila);
                            Col_Err.Add(columna);
                            Desc_Err.Add("Caracter Inválido");
                            posicion++;
                            columna++;
                        }
                        break;
                    case 1:
                        aux = "";
                        corch = false;
                        for (int sus = posicion; sus < Codigo.Length; sus++)
                        {
                            aux = aux + Codigo[sus];
                            if (aux == "[[")
                            {
                                sus = Codigo.Length;
                                estado = 3;
                                posicion++;
                                corch = true;
                            }
                        }
                        if (!corch)
                        {
                            Tkns.Add("Tkn_CorcheteAbrir");
                            Lex_Tkns.Add("[");
                            Id_Tkn.Add(1);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            posicion++;
                            columna++;
                            estado = 0;
                            toks.Add("Tkn_CorcheteAbrir");
                            lexs.Add("[");
                        }
                        break;
                    case 2:
                        aux = "";
                        corch = false;
                        for (int sus = posicion; sus < Codigo.Length; sus++)
                        {
                            aux = aux + Codigo[sus];
                            if (aux == "]]")
                            {
                                sus = Codigo.Length;
                                estado = 4;
                                posicion++;
                                corch = true;
                            }
                        }
                        if (!corch)
                        {
                            Tkns.Add("Tkn_CorcheteCerrar");
                            Lex_Tkns.Add("]");
                            Id_Tkn.Add(2);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            posicion++;
                            columna++;
                            estado = 0;
                            lexs.Add("]");
                            toks.Add("Tkn_CorcheteCerrar");
                        }
                        break;
                    case 3:
                        Tkns.Add("Tkn_DobleCorcheteAbrir");
                        Lex_Tkns.Add("[[");
                        Id_Tkn.Add(3);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        posicion++;
                        columna++;
                        estado = 0;
                        lexs.Add("[[");
                        toks.Add("Tkn_DobleCorcheteAbrir");
                        break;
                    case 4:
                        Tkns.Add("Tkn_DobleCorcheteCerrar");
                        Lex_Tkns.Add("]]");
                        Id_Tkn.Add(4);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        posicion++;
                        columna++;
                        estado = 0;
                        toks.Add("Tkn_DobleCorcheteCerrar");
                        lexs.Add("]]");
                        break;
                    case 5:
                        Tkns.Add("Tkn_FinSentencia");
                        Lex_Tkns.Add("$");
                        Id_Tkn.Add(5);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        posicion++;
                        columna++;
                        estado = 0;
                        lexs.Add("$");
                        toks.Add("Tkn_FinSentencia");
                        break;
                    case 6:

                        cond = false;
                        for (int sus = posicion; sus < Codigo.Length; sus++)
                        {
                            aux = aux + Codigo[sus];
                            if (aux == "::=")
                            {
                                sus = Codigo.Length;
                                estado = 7;
                                cond = true;
                                posicion++;
                            }
                        }
                        if (!cond)
                        {
                            Tkns.Add("Tkn_DosPuntos");
                            Lex_Tkns.Add(":");
                            Id_Tkn.Add(6);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            posicion++;
                            columna++;
                            estado = 0;
                            toks.Add("Tkn_DosPuntos");
                            lexs.Add(":");

                        }
                        break;
                    case 7:
                        if (cond)
                        {
                            Tkns.Add("Tkn_Sentencia");
                            Lex_Tkns.Add("::=");
                            Id_Tkn.Add(7);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            columna++;
                            posicion = posicion + 2;
                            estado = 0;
                            cond = false;
                            toks.Add("Tkn_Sentencia");
                            lexs.Add("::=");
                        }
                        else
                        {

                            Tkns.Add("Tkn_Sentencia");
                            Lex_Tkns.Add("=");
                            Id_Tkn.Add(7);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            columna++;
                            posicion++;
                            estado = 0;
                            lexs.Add("=");
                            toks.Add("Tkn_Sentencia");
                        }
                        break;
                    case 8:
                        Tkns.Add("Tkn_Mas");
                        Lex_Tkns.Add("+");
                        Id_Tkn.Add(8);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        columna++;
                        posicion++;
                        estado = 0;
                        lexs.Add("+");
                        toks.Add("Tkn_Mas");
                        break;
                    case 9:
                        Tkns.Add("Tkn_Asterisco");
                        Lex_Tkns.Add("*");
                        Id_Tkn.Add(9);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        columna++;
                        posicion++;
                        estado = 0;
                        lexs.Add("*");
                        toks.Add("Tkn_Asterisco");
                        break;
                    case 10:
                        Tkns.Add("Tkn_Interrogación");
                        Lex_Tkns.Add("?");
                        Id_Tkn.Add(10);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        columna++;
                        posicion++;
                        estado = 0;
                        lexs.Add("?");
                        toks.Add("Tkn_Interrogación");
                        break;
                    case 11:
                        Tkns.Add("Tkn_Concatenación");
                        Lex_Tkns.Add(".");
                        Id_Tkn.Add(11);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        columna++;
                        posicion++;
                        estado = 0;
                        lexs.Add(".");
                        toks.Add("Tkn_Concatenación");
                        break;
                    case 12:
                        Tkns.Add("Tkn_OExclusivo");
                        Lex_Tkns.Add("|");
                        Id_Tkn.Add(12);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        columna++;
                        posicion++;
                        estado = 0;
                        lexs.Add("|");
                        toks.Add("Tkn_OExclusivo");
                        break;
                    case 13:
                        Tkns.Add("Tkn_ComillaSimple");
                        Lex_Tkns.Add("'");
                        Id_Tkn.Add(13);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        columna++;
                        posicion++;
                        estado = 0;
                        comsim++;
                        lexs.Add("'");
                        toks.Add("Tkn_ComillaSimple");
                        if (comsim == 2)
                        {
                            comsim = 0;
                        }
                        break;
                    case 14:
                        char com = '"';
                        Tkns.Add("Tkn_ComillaDoble");
                        Lex_Tkns.Add(com.ToString());
                        Id_Tkn.Add(14);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        columna++;
                        posicion++;
                        estado = 0;
                        comdobl++;
                        lexs.Add(com.ToString());
                        toks.Add("Tkn_ComillaDoble");
                        if (comdobl == 2)
                        {
                            comdobl = 0;
                        }
                        break;
                    case 15:
                        Tkns.Add("Tkn_ParéntesisAbrir");
                        Lex_Tkns.Add("(");
                        Id_Tkn.Add(15);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        columna++;
                        posicion++;
                        estado = 0;
                        lexs.Add("(");
                        toks.Add("Tkn_ParéntesisAbrir");
                        break;
                    case 16:
                        Tkns.Add("Tkn_ParéntesisCerrar");
                        Lex_Tkns.Add(")");
                        Id_Tkn.Add(16);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        columna++;
                        posicion++;
                        estado = 0;
                        lexs.Add(")");
                        toks.Add("Tkn_ParéntesisCerrar");
                        break;
                    case 17:
                        Tkns.Add("Tkn_Coma");
                        Lex_Tkns.Add(",");
                        Id_Tkn.Add(17);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        columna++;
                        posicion++;
                        estado = 0;
                        lexs.Add(",");
                        toks.Add("Tkn_Coma");
                        break;
                    case 18:
                        Tkns.Add("Tkn_LlaveAbrir");
                        Lex_Tkns.Add("{");
                        Id_Tkn.Add(18);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        columna++;
                        posicion++;
                        estado = 0;
                        lexs.Add("{");
                        toks.Add("Tkn_LlaveAbrir");
                        break;
                    case 19:
                        Tkns.Add("Tkn_LlaveCerrar");
                        Lex_Tkns.Add("}");
                        Id_Tkn.Add(19);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        columna++;
                        posicion++;
                        estado = 0;
                        lexs.Add("}");
                        toks.Add("Tkn_LlaveCerrar");
                        break;
                    case 20:
                        Tkns.Add("Tkn_SimboloMayor");
                        Lex_Tkns.Add("<");
                        Id_Tkn.Add(20);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        columna++;
                        posicion++;
                        estado = 0;
                        lexs.Add("<");
                        toks.Add("Tkn_SimboloMayor");
                        break;
                    case 21:
                        Tkns.Add("Tkn_SimboloMenor");
                        Lex_Tkns.Add(">");
                        Id_Tkn.Add(20);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        columna++;
                        posicion++;
                        estado = 0;
                        lexs.Add(">");
                        toks.Add("Tkn_SimboloMenor");
                        break;
                    case 22:
                        cond = false;
                        aux = "";
                        if (commult == 1)
                        {
                            estado = 26;
                        }
                        else
                        {
                            for (int sus = posicion; sus < Codigo.Length; sus++)
                            {
                                aux = aux + Codigo[sus];
                                if (aux == "-#")
                                {
                                    sus = Codigo.Length;
                                    estado = 25;
                                    posicion++;
                                    cond = true;
                                }
                            }
                            if (!cond)
                            {
                                Tkns.Add("Tkn_Cierre");
                                Lex_Tkns.Add("-");
                                Id_Tkn.Add(22);
                                Fil_Tkns.Add(fila);
                                Col_Tkns.Add(columna);
                                posicion++;
                                columna++;
                                estado = 0;
                                lexs.Add("-");
                                toks.Add("Tkn_Cierre");
                            }
                        }

                        break;
                    case 23:
                        cond = false;
                        aux = "";

                        for (int sus = posicion; sus < Codigo.Length; sus++)
                        {
                            aux = aux + Codigo[sus];
                            if (aux == "#-")
                            {
                                sus = Codigo.Length;
                                estado = 24;
                                posicion++;
                                cond = true;
                            }
                        }
                        if (!cond)
                        {
                            Tkns.Add("Tkn_Comentario");
                            Lex_Tkns.Add("#");
                            Id_Tkn.Add(23);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            posicion++;
                            columna++;
                            comm = true;
                            estado = 0;
                            lexs.Add("#");
                            toks.Add("Tkn_Comentario");
                        }

                        break;
                    case 24:
                        Tkns.Add("Tkn_AbreComentario");
                        Lex_Tkns.Add("#-");
                        Id_Tkn.Add(24);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        posicion++;
                        columna++;
                        commult = 1;
                        estado = 0;
                        lexs.Add("#-");
                        toks.Add("Tkn_AbreComentario");
                        break;
                    case 25:
                        Tkns.Add("Tkn_CierreComentario");
                        Lex_Tkns.Add("-#");
                        Id_Tkn.Add(25);
                        Fil_Tkns.Add(fila);
                        Col_Tkns.Add(columna);
                        posicion++;
                        columna++;
                        commult = 2;
                        estado = 0;
                        lexs.Add("-#");
                        toks.Add("Tkn_CierreComentario");
                        break;
                    case 26:
                        for (int sus = posicion; sus < Codigo.Length; sus++)
                        {
                            if (Codigo[sus] == 32)
                            {
                                posicion++;
                            }
                            else if (comm || comsim != 0 || comdobl != 0 || commult == 1)
                            {
                                for (int cua = sus; cua < Codigo.Length; cua++)
                                {
                                    if (Codigo[cua] == '#' || Codigo[cua] == 39 || Codigo[cua] == '"' || Codigo[cua] == '|')
                                    {
                                        if (Codigo[cua] == '#')
                                        {
                                            commult = 2;
                                            //if (pal.Last() == '-')
                                            //{
                                            //    pal = pal.TrimEnd();
                                            //    posicion = cua - 1;
                                            //}
                                            cua = Codigo.Length;
                                            sus = Codigo.Length;
                                        }
                                        else
                                        {
                                            cua = Codigo.Length;
                                            sus = Codigo.Length;
                                        }
                                    } else
                                    {
                                        pal = pal + Codigo[cua].ToString();
                                        posicion++;
                                        sus++;
                                    }
                                }
                            }
                            else
                            {
                                for (int cua = sus; cua < Codigo.Length; cua++)
                                {
                                    if (Codigo[cua] == '>' || Codigo[cua] == '=' || Codigo[cua] == ',' || Codigo[cua] == '}' || Codigo[cua] == ']' || Codigo[cua] == 124 || Codigo[cua] == '.' || Codigo[cua] == ':' || Codigo[cua] == '<' || Codigo[cua] == 32 || Codigo[cua] == '|' || Codigo[cua] == '+' || Codigo[cua] == '*' || Codigo[cua] == '?')
                                    {
                                        cua = Codigo.Length;
                                        sus = Codigo.Length;
                                    }
                                    else if ((65 <= Codigo[cua] && Codigo[cua] <= 90) || (97 <= Codigo[cua] && Codigo[cua] <= 122) || (48 <= Codigo[cua] && Codigo[cua] <= 57) || Codigo[cua] == '_' || Codigo[cua] == 'ñ' || Codigo[cua] == 'Ñ')
                                    {

                                        pal = pal + Codigo[cua].ToString();
                                        posicion++;
                                        sus++;
                                    }
                                    else
                                    {
                                        Err.Add(Codigo[cua].ToString());
                                        Tip_Err.Add("Error Léxico");
                                        Fil_Err.Add(fila);
                                        Col_Err.Add(columna);
                                        Desc_Err.Add("Caracter Inválido");
                                        posicion++;
                                        columna++;
                                    }
                                }
                            }
                        }
                        if (String.Equals(pal, "lenguaje", StringComparison.InvariantCultureIgnoreCase) == true)
                        {
                            Tkns.Add("Tkn_Lenguaje");
                            Lex_Tkns.Add(pal);
                            Id_Tkn.Add(26);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            columna++;
                            lexs.Add(pal);
                            pal = "";
                            estado = 0;
                            toks.Add("Tkn_Lenguaje");
                        }
                        else if (String.Equals(pal, "componentes", StringComparison.InvariantCultureIgnoreCase) == true)
                        {
                            Tkns.Add("Tkn_ComponentesLéxicos");
                            Lex_Tkns.Add(pal + " LEXICOS");
                            Id_Tkn.Add(27);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            posicion = posicion + 8;
                            lexs.Add(pal + " LEXICOS");
                            columna++;
                            pal = "";
                            estado = 0;
                            toks.Add("Tkn_ComponentesLéxicos");
                        }
                        else if (String.Equals(pal, "reservadas", StringComparison.InvariantCultureIgnoreCase) == true)
                        {
                            Tkns.Add("Tkn_Reservadas");
                            Lex_Tkns.Add(pal);
                            Id_Tkn.Add(28);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            columna++;
                            lexs.Add(pal);
                            pal = "";
                            estado = 0;
                            toks.Add("Tkn_Reservadas");
                        }
                        else if (String.Equals(pal, "Gramatica", StringComparison.InvariantCultureIgnoreCase) == true)
                        {
                            Tkns.Add("Tkn_Gramática");
                            Lex_Tkns.Add(pal);
                            Id_Tkn.Add(29);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            columna++;
                            lexs.Add(pal);
                            pal = "";
                            estado = 0;
                            toks.Add("Tkn_Gramática");
                        }
                        else if (String.Equals(pal, "No_Terminales", StringComparison.InvariantCultureIgnoreCase) == true)
                        {
                            Tkns.Add("Tkn_NoTerminales");
                            Lex_Tkns.Add(pal);
                            Id_Tkn.Add(30);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            columna++;
                            lexs.Add(pal);
                            pal = "";
                            estado = 0;
                            toks.Add("Tkn_NoTerminales");
                        }
                        else if (String.Equals(pal, "Terminales", StringComparison.InvariantCultureIgnoreCase) == true)
                        {
                            Tkns.Add("Tkn_Terminales");
                            Lex_Tkns.Add(pal);
                            Id_Tkn.Add(31);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            columna++;
                            lexs.Add(pal);
                            pal = "";
                            estado = 0;
                            toks.Add("Tkn_Terminales");
                        }
                        else if (String.Equals(pal, "Inicio", StringComparison.InvariantCultureIgnoreCase) == true)
                        {
                            Tkns.Add("Tkn_Inicio");
                            Lex_Tkns.Add(pal);
                            Id_Tkn.Add(32);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            columna++;
                            lexs.Add(pal);
                            pal = "";
                            estado = 0;
                            toks.Add("Tkn_Inicio");
                        }
                        else if (String.Equals(pal, "Producciones", StringComparison.InvariantCultureIgnoreCase) == true)
                        {
                            Tkns.Add("Tkn_Producciones");
                            Lex_Tkns.Add(pal);
                            Id_Tkn.Add(33);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            columna++;
                            lexs.Add(pal);
                            pal = "";
                            estado = 0;
                            toks.Add("Tkn_Producciones");
                        }
                        else if (String.Equals(pal, "epsilon", StringComparison.InvariantCultureIgnoreCase) == true)
                        {
                            Tkns.Add("Tkn_Epsilon");
                            Lex_Tkns.Add("epsilon");
                            Id_Tkn.Add(34);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            columna++;
                            lexs.Add(pal);
                            pal = "";
                            estado = 0;
                            toks.Add("Tkn_Epsilon");
                        }
                        else
                        {
                            Tkns.Add("Tkn_Identificador");
                            Lex_Tkns.Add(pal);
                            Id_Tkn.Add(35);
                            Fil_Tkns.Add(fila);
                            Col_Tkns.Add(columna);
                            columna++;
                            lexs.Add(pal);
                            pal = "";
                            estado = 0;
                            toks.Add("Tkn_Identificador");
                        }
                        break;
                }
            }
            fila++;
        }

        //Analizador Sintactico
        private void Analizador_Sintactico(List<string> Tokens)
        {
            int estado = 0;
            int ci = 0;
            int cico = 0;
            string nt = "";
            int com = 0;
            int comms = 0;
            while (indice < Tokens.Count())
            {
                switch (estado) {
                    case 0:
                        if (Tokens[indice] == "Tkn_CorcheteAbrir")
                        {
                            estado = 1;
                            indice++;
                            ci = 0;
                            cico = 0;
                            com = 0;
                        }
                        else if (Tokens[indice] == "Tkn_DobleCorcheteAbrir")
                        {
                            estado = 3;
                            indice++;
                            ci = 0;
                            cico = 0;
                            com = 0;
                        }
                        else if (Tokens[indice] == "Tkn_Producciones")
                        {
                            estado = 6;
                            indice++;
                            ci = 0;
                            cico = 0;
                            com = 0;
                        }
                        else if (Tokens[indice] == "Tkn_Inicio")
                        {
                            estado = 8;
                            indice++;
                            ci = 0;
                            cico = 0;
                            com = 0;
                        }
                        else if (Tokens[indice] == "Tkn_Terminales")
                        {
                            estado = 14;
                            indice++;
                            ci = 0;
                            cico = 0;
                            com = 0;
                        }
                        else if (Tokens[indice] == "Tkn_Comentario")
                        {
                            estado = 12;
                            indice++;
                            ci = 0;
                            cico = 0;
                            com = 0;
                        }
                        else if (Tokens[indice] == "Tkn_AbreComentario")
                        {
                            estado = 13;
                            indice++;
                            com = 1;
                            ci = 0;
                            cico = 0;
                            nt = "";
                        }
                        else if (Tokens[indice] == "Tkn_NoTerminales")
                        {
                            indice++;
                            estado = 20;
                            nt = "";
                        }
                        else if (Tokens[indice] == "Tkn_Identificador" && secres == 1)
                        {
                            IniTerm.Add(Lex_Tkns[indice]);
                            indice++;
                            estado = 26;
                            nt = "";
                        }
                        else if (Tokens[indice] == "Tkn_Identificador" && seccom == 1)
                        {
                            IniTerm.Add(Lex_Tkns[indice]);
                            indice++;
                            estado = 28;
                            nt = "";
                        }
                        else if (Tokens[indice] == "Tkn_LlaveCerrar")
                        {
                            IniTerm.Add(Lex_Tkns[indice]);
                            indice++;
                            estado = 28;
                            nt = "";
                        }
                        else
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("Token Invalido");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        break;
                    case 1:
                        if (Tokens[indice] == "Tkn_Lenguaje")
                        {
                            indice++;
                            estado = 2;
                        }
                        else if (Tokens[indice] == "Tkn_Cierre" && ci == 0)
                        {
                            ci++;
                            indice++;
                            estado = 1;
                        }
                        else
                        {
                            if (ci != 0 && Tokens[indice] == "Tkn_Cierre")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Solo se permite una vez el token cierre");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else if (Tokens[indice] == "Tkn_CorcheteCerrar")
                            {
                                estado = 2;
                            }
                            else if (Tokens[indice] == "Tkn_CorcheteAbrir")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Solo se permite una vez el token CorcheteAbrir");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el Token Lenguaje o el Token Cierre");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }

                        }
                        break;
                    case 2:
                        if (Tokens[indice] == "Tkn_CorcheteCerrar" && cico == 0)
                        {
                            indice++;
                            cico++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_DobleCorcheteAbrir" || Tokens[indice] == "Tkn_CorcheteAbrir" || Tokens[indice] == "Tkn_Producciones" || Tokens[indice] == "Tkn_Inicio" || Tokens[indice] == "Tkn_AbreComentario" || Tokens[indice] == "Tkn_Terminales" || Tokens[indice] == "Tkn_Comentario")
                            {
                                estado = 0;
                                cico = 0;
                                ci = 0;
                            }
                            else if (cico > 0 && Tokens[indice] == "Tkn_CorcheteCerrar")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("El Token CorcheteCerrar solo se puede presentar una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el Token CorcheteCerrar");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 3:
                        if (Tokens[indice] == "Tkn_ComponentesLéxicos" && ci == 0)
                        {
                            ci++;
                            indice++;
                            estado = 4;
                            seccom = 1;
                            secgram = 0;
                            secres = 0;
                        }
                        else if (Tokens[indice] == "Tkn_Reservadas" && ci == 0)
                        {
                            ci++;
                            indice++;
                            estado = 4;
                            seccom = 0;
                            secgram = 0;
                            secres = 1;
                        }
                        else if (Tokens[indice] == "Tkn_Gramática" && ci == 0)
                        {
                            ci++;
                            indice++;
                            estado = 5;
                            seccom = 0;
                            secgram = 1;
                            secres = 0;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_ComponentesLéxicos" && ci > 0)
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Un token de sección solo se puede presentar una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else if (Tokens[indice] == "Tkn_Reservadas" && ci > 0)
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Un token de sección  solo se puede presentar una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else if (Tokens[indice] == "Tkn_Gramática" && ci > 0)
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Un token de sección solo se puede presentar una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else if (Tokens[indice] == "Tkn_DobleCorcheteAbrir")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("El token DobleCorcheteAbrir solo se puede presentar una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else if (Tokens[indice] == "Tkn_DobleCorcheteCerrar")
                            {
                                estado = 4;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba un token de seccion");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 4:
                        if (Tokens[indice] == "Tkn_DobleCorcheteCerrar" && cico == 0)
                        {
                            indice++;
                            cico++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_DobleCorcheteAbrir" || Tokens[indice] == "Tkn_CorcheteAbrir" || Tokens[indice] == "Tkn_Producciones" || Tokens[indice] == "Tkn_Inicio" || Tokens[indice] == "Tkn_AbreComentario" || Tokens[indice] == "Tkn_Terminales" || Tokens[indice] == "Tkn_Comentario" || Tokens[indice] == "Tkn_Identificador")
                            {
                                estado = 0;
                                cico = 0;
                                ci = 0;
                            }
                            else if (cico > 0 && Tokens[indice] == "Tkn_DobleCorcheteCerrar")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("El Token DobleCorcheteCerrar solo se puede presentar una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el Token DobleCorcheteCerrar");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 5:
                        if (Tokens[indice] == "Tkn_Identificador" && ci != 1)
                        {
                            indice++;
                            estado = 4;
                        }
                        else if (Tokens[indice] == "Tkn_DosPuntos" && ci == 1)
                        {
                            ci++;
                            indice++;
                            estado = 5;
                        }
                        else
                        {
                            if (ci == 1 && Tokens[indice] == "Tkn_Identificador")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("No esta presente el token dos puntos");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            if (ci != 1 && Tokens[indice] == "Tkn_DosPuntos")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Solo se permite una vez el token DosPuntos");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else if (Tokens[indice] == "Tkn_DobleCorcheteCerrar")
                            {
                                estado = 4;
                            }
                            else if (Tokens[indice] == "Tkn_DobleCorcheteAbrir")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Solo se permite una vez el token doblecorcheteabrir");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;

                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el Token DosPuntos o el Token Identificador");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }

                        }
                        break;
                    case 6:
                        if (Tokens[indice] == "Tkn_Sentencia" && cico == 0)
                        {
                            indice++;
                            estado = 7;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_Producciones")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("El Token Producciones solo se puede presentar una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el Token Sentencia");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 7:
                        if (Tokens[indice] == "Tkn_LlaveAbrir" && cico == 0)
                        {
                            indice++;
                            cico++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_DobleCorcheteAbrir" || Tokens[indice] == "Tkn_CorcheteAbrir" || Tokens[indice] == "Tkn_Producciones" || Tokens[indice] == "Tkn_Inicio" || Tokens[indice] == "Tkn_AbreComentario" || Tokens[indice] == "Tkn_Terminales")
                            {
                                estado = 0;
                                cico = 0;
                                ci = 0;
                            }
                            else if (cico > 0 && Tokens[indice] == "Tkn_LlaveAbrir")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("El Token LlaveAbrir solo se puede presentar una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el Token LlaveAbrir");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 8:
                        if (Tokens[indice] == "Tkn_Sentencia" && cico == 0)
                        {
                            indice++;
                            estado = 9;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_SimboloMayor")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("No esta presente el token sentencia");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                                estado = 10;
                            }
                            else if (Tokens[indice] == "Tkn_Inicio")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("El Token Inicio solo se puede presentar una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el Token Sentencia");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 9:
                        if (Tokens[indice] == "Tkn_SimboloMayor")
                        {
                            estado = 10;
                            indice++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_Identificador")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("No esta presente el token SimboloMayor");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                                estado = 11;
                            }
                            if (Tokens[indice] == "Tkn_Sentencia")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("El Token Sentencia solo se puede presentar una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el Token SimboloMayor");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 10:
                        if (Tokens[indice] == "Tkn_Identificador")
                        {
                            estado = 11;
                            indice++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_SimboloMayor")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("El Token SimboloMayor solo se puede presentar una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el Token Identificador");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 11:
                        if (Tokens[indice] == "Tkn_SimboloMenor")
                        {
                            indice++;
                            cico++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_DobleCorcheteAbrir" || Tokens[indice] == "Tkn_CorcheteAbrir" || Tokens[indice] == "Tkn_Producciones" || Tokens[indice] == "Tkn_Inicio")
                            {
                                estado = 0;
                                cico = 0;
                                ci = 0;
                            }
                            else if (cico > 0 && Tokens[indice] == "Tkn_SimboloMenor")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("El Token SimboloMenor solo se puede presentar una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el Token SimboloMenor");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 12:
                        if (Tokens[indice] == "Tkn_Identificador")
                        {
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_Comentario")
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("El Token Comentario solo se puede presentar una vez");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_DobleCorcheteAbrir" || Tokens[indice] == "Tkn_CorcheteAbrir" || Tokens[indice] == "Tkn_Producciones" || Tokens[indice] == "Tkn_Inicio" || Tokens[indice] == "Tkn_AbreComentario" || Tokens[indice] == "Tkn_Terminales")
                        {
                            estado = 0;
                            cico = 0;
                            ci = 0;
                        }
                        break;
                    case 13:
                        if (Tokens[indice] == "Tkn_Identificador")
                        {
                            indice++;
                            com = 2;
                        }
                        else if (Tokens[indice] == "Tkn_Comentario" && com == 2)
                        {
                            estado = 0;
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_Comentario" && com != 2)
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("No esta presente el token Identificador");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_AbreComentario")
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("El Token AbreComentario solo puede estar presente una vez");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_DobleCorcheteAbrir" || Tokens[indice] == "Tkn_CorcheteAbrir" || Tokens[indice] == "Tkn_Producciones" || Tokens[indice] == "Tkn_Inicio" || Tokens[indice] == "Tkn_AbreComentario" || Tokens[indice] == "Tkn_Terminales")
                        {
                            estado = 0;
                            cico = 0;
                            ci = 0;
                        }
                        else
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("Se esperaba el token Identificador o el token comentario");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        break;
                    case 14:
                        if (Tokens[indice] == "Tkn_Sentencia" && cico == 0)
                        {
                            estado = 15;
                            indice++;
                            cico++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_Terminales")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("El Token Terminales solo puede estar presente una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el token Sentencia");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 15:
                        if (Tokens[indice] == "Tkn_LlaveAbrir")
                        {
                            estado = 16;
                            indice++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_Sentencia")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("El Token Sentencia solo puede estar presente una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el token LlaveAbrir");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 16:
                        if (Tokens[indice] == "Tkn_Identificador")
                        {
                            Termi.Add(Lex_Tkns[indice]);
                            estado = 17;
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_Coma")
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("No esta presente el token Identificador");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_SimboloMayor")
                        {
                            nt = nt + "<";
                            estado = 18;
                            indice++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_LlaveCerrar")
                            {
                                estado = 0;
                                indice++;
                            }
                            else if (Tokens[indice] == "Tkn_DobleCorcheteAbrir" || Tokens[indice] == "Tkn_CorcheteAbrir" || Tokens[indice] == "Tkn_Producciones" || Tokens[indice] == "Tkn_Inicio" || Tokens[indice] == "Tkn_AbreComentario" || Tokens[indice] == "Tkn_Terminales")
                            {
                                estado = 0;
                                cico = 0;
                                ci = 0;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el token Identificador");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 17:
                        if (Tokens[indice] == "Tkn_Coma")
                        {
                            estado = 16;
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_Identificador")
                        {
                            Termi.Add(Lex_Tkns[indice]);
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("No esta presente el token coma");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_SimboloMayor")
                        {
                            nt = nt + "<";
                            estado = 19;
                            indice++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_LlaveCerrar")
                            {
                                estado = 0;
                                indice++;
                            }
                            else if (Tokens[indice] == "Tkn_DobleCorcheteAbrir" || Tokens[indice] == "Tkn_CorcheteAbrir" || Tokens[indice] == "Tkn_Producciones" || Tokens[indice] == "Tkn_Inicio" || Tokens[indice] == "Tkn_AbreComentario" || Tokens[indice] == "Tkn_Terminales")
                            {
                                estado = 0;
                                cico = 0;
                                ci = 0;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el token Coma");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 18:
                        if (Tokens[indice] == "Tkn_Identificador")
                        {
                            nt = nt + Lex_Tkns[indice];
                            estado = 19;
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_Coma")
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("No esta presente el token simbolomenor");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_LlaveCerrar")
                            {
                                estado = 0;
                                indice++;
                            }
                            else if (Tokens[indice] == "Tkn_DobleCorcheteAbrir" || Tokens[indice] == "Tkn_CorcheteAbrir" || Tokens[indice] == "Tkn_Producciones" || Tokens[indice] == "Tkn_Inicio" || Tokens[indice] == "Tkn_AbreComentario" || Tokens[indice] == "Tkn_Terminales")
                            {
                                estado = 0;
                                cico = 0;
                                ci = 0;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el token Identificador");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 19:
                        if (Tokens[indice] == "Tkn_SimboloMenor")
                        {
                            nt = nt + ">";
                            Termi.Add(nt);
                            nt = "";
                            estado = 17;
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_Coma")
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("No esta presente el token simbolomenor");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_LlaveCerrar")
                            {
                                estado = 0;
                                indice++;
                            }
                            else if (Tokens[indice] == "Tkn_DobleCorcheteAbrir" || Tokens[indice] == "Tkn_CorcheteAbrir" || Tokens[indice] == "Tkn_Producciones" || Tokens[indice] == "Tkn_Inicio" || Tokens[indice] == "Tkn_AbreComentario" || Tokens[indice] == "Tkn_Terminales")
                            {
                                estado = 0;
                                cico = 0;
                                ci = 0;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el token Identificador");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 20:
                        if (Tokens[indice] == "Tkn_Sentencia" && cico == 0)
                        {
                            estado = 15;
                            indice++;
                            cico++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_Terminales")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("El Token Terminales solo puede estar presente una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el token Sentencia");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 21:
                        if (Tokens[indice] == "Tkn_LlaveAbrir")
                        {
                            estado = 16;
                            indice++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_Sentencia")
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("El Token Sentencia solo puede estar presente una vez");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el token LlaveAbrir");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 22:
                        if (Tokens[indice] == "Tkn_Identificador")
                        {
                            NoTermi.Add(Lex_Tkns[indice]);
                            estado = 17;
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_Coma")
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("No esta presente el token Identificador");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_SimboloMayor")
                        {
                            nt = nt + "<";
                            estado = 18;
                            indice++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_LlaveCerrar")
                            {
                                estado = 0;
                                indice++;
                            }
                            else if (Tokens[indice] == "Tkn_DobleCorcheteAbrir" || Tokens[indice] == "Tkn_CorcheteAbrir" || Tokens[indice] == "Tkn_Producciones" || Tokens[indice] == "Tkn_Inicio" || Tokens[indice] == "Tkn_AbreComentario" || Tokens[indice] == "Tkn_Terminales")
                            {
                                estado = 0;
                                cico = 0;
                                ci = 0;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el token Identificador");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 23:
                        if (Tokens[indice] == "Tkn_Coma")
                        {
                            estado = 16;
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_Identificador")
                        {
                            NoTermi.Add(Lex_Tkns[indice]);
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("No esta presente el token coma");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_SimboloMayor")
                        {
                            nt = nt + "<";
                            estado = 19;
                            indice++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_LlaveCerrar")
                            {
                                estado = 0;
                                indice++;
                            }
                            else if (Tokens[indice] == "Tkn_DobleCorcheteAbrir" || Tokens[indice] == "Tkn_CorcheteAbrir" || Tokens[indice] == "Tkn_Producciones" || Tokens[indice] == "Tkn_Inicio" || Tokens[indice] == "Tkn_AbreComentario" || Tokens[indice] == "Tkn_Terminales")
                            {
                                estado = 0;
                                cico = 0;
                                ci = 0;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el token Coma");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 24:
                        if (Tokens[indice] == "Tkn_Identificador")
                        {
                            nt = nt + Lex_Tkns[indice];
                            estado = 19;
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_Coma")
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("No esta presente el token simbolomenor");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_LlaveCerrar")
                            {
                                estado = 0;
                                indice++;
                            }
                            else if (Tokens[indice] == "Tkn_DobleCorcheteAbrir" || Tokens[indice] == "Tkn_CorcheteAbrir" || Tokens[indice] == "Tkn_Producciones" || Tokens[indice] == "Tkn_Inicio" || Tokens[indice] == "Tkn_AbreComentario" || Tokens[indice] == "Tkn_Terminales")
                            {
                                estado = 0;
                                cico = 0;
                                ci = 0;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el token Identificador");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 25:
                        if (Tokens[indice] == "Tkn_SimboloMenor")
                        {
                            nt = nt + ">";
                            NoTermi.Add(nt);
                            nt = "";
                            estado = 17;
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_Coma")
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("No esta presente el token simbolomenor");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        else
                        {
                            if (Tokens[indice] == "Tkn_LlaveCerrar")
                            {
                                estado = 0;
                                indice++;
                            }
                            else if (Tokens[indice] == "Tkn_DobleCorcheteAbrir" || Tokens[indice] == "Tkn_CorcheteAbrir" || Tokens[indice] == "Tkn_Producciones" || Tokens[indice] == "Tkn_Inicio" || Tokens[indice] == "Tkn_AbreComentario" || Tokens[indice] == "Tkn_Terminales")
                            {
                                estado = 0;
                                cico = 0;
                                ci = 0;
                            }
                            else
                            {
                                Err.Add(Tokens[indice]);
                                Desc_Err.Add("Se esperaba el token Identificador");
                                Fil_Err.Add(Fil_Tkns[indice]);
                                Col_Err.Add(Col_Tkns[indice]);
                                Tip_Err.Add("Sintáctico");
                                indice++;
                            }
                        }
                        break;
                    case 26:
                        if (Tokens[indice] == "Tkn_Sentencia")
                        {
                            estado = 27;
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_Identificador")
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("El Token identificador solo puede estar presente una vez");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        else
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("Se esperaba el token sentencia");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        break;
                    case 27:
                        if (Tokens[indice] == "Tkn_ComillaDoble" && comms==0)
                        {
                            nt = nt + Lex_Tkns[indice];
                            indice++;
                            comms++;
                        }
                        else if (Tokens[indice] == "Tkn_Identificador" && comms==1)
                        {
                            nt = nt + Lex_Tkns[indice];
                            indice++;
                            comms++;
                        }
                        else if (Tokens[indice] == "Tkn_ComillaDoble" && comms == 2)
                        {
                            nt = nt + Lex_Tkns[indice];
                            ResIniTer.Add(nt);
                            indice++;
                            comms=0;
                        }
                        else if (Tokens[indice] == "Tkn_FinSentencia")
                        {
                            estado = 0;
                            indice++;
                        }
                        else
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("Token Invalido");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        break;
                    case 28:
                        if (Tokens[indice] == "Tkn_Cierre" || Tokens[indice] == "Tkn_Coma" || Tokens[indice] == "Tkn_Mas"|| Tokens[indice] == "Tkn_Asterisco"|| Tokens[indice] == "Tkn_Concatenación"|| Tokens[indice] == "Tkn_Interrogación"|| Tokens[indice] == "Tkn_DosPuntos" || Lex_Tkns[indice] == "="||Tokens[indice] == "Tkn_ParéntesisAbrir" || Tokens[indice] == "Tkn_ParéntesisCerrar" || Tokens[indice] == "Tkn_OExclusivo")
                        {
                            nt = nt + Lex_Tkns[indice];
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_Identificador")
                        {
                            nt = nt + Lex_Tkns[indice];
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_ComillaSimple" || Tokens[indice] == "Tkn_ComillaDoble")
                        {
                            nt = nt + Lex_Tkns[indice];
                            indice++;
                        }
                        else if (Tokens[indice] == "Tkn_FinSentencia")
                        {
                            ResIniTer.Add(nt);
                            estado = 0;
                            indice++;
                        }
                        else
                        {
                            Err.Add(Tokens[indice]);
                            Desc_Err.Add("Token Invalido");
                            Fil_Err.Add(Fil_Tkns[indice]);
                            Col_Err.Add(Col_Tkns[indice]);
                            Tip_Err.Add("Sintáctico");
                            indice++;
                        }
                        break;
                }
            }
            indice = 0;
        }


        //Analizador Semantico
        private void Analizador_Semantico()
        {
            for(int a = 0; a < Termi.Count(); a++)
            {
                for(int b=0;b<Termi.Count(); b++)
                {
                    if(Termi[a]==Termi[b] && (a != b))
                    {
                        Err.Add(Termi[a]);
                        Desc_Err.Add("Nombre Duplicado");
                        Fil_Err.Add(1);
                        Col_Err.Add(a);
                        Tip_Err.Add("Semántico");
                    } 
                }
            }

            for (int a = 0; a < NoTermi.Count(); a++)
            {
               for (int b = 0; b < NoTermi.Count(); b++)
                {
                    if (NoTermi[a] == NoTermi[b] && (a != b))
                    {
                        Err.Add(Termi[a]);
                        Desc_Err.Add("Nombre Duplicado");
                        Fil_Err.Add(1);
                        Col_Err.Add(a);
                        Tip_Err.Add("Semántico");
                    }
                }
            }

            for (int a = 0; a < Termi.Count(); a++)
            {
                for (int b = 0; b < NoTermi.Count(); b++)
                {
                    if (Termi[a] == NoTermi[b])
                    {
                        Err.Add(Termi[a]);
                        Desc_Err.Add("Uno de terminal en No terminal");
                        Fil_Err.Add(1);
                        Col_Err.Add(a);
                        Tip_Err.Add("Semántico");
                    }
                }
            }

            for (int a = 0; a < NoTermi.Count(); a++)
            {
                for (int b = 0; b < Termi.Count(); b++)
                {
                    if (NoTermi[a] == Termi[b])
                    {
                        Err.Add(Termi[a]);
                        Desc_Err.Add("Uso de no terminal en terminal");
                        Fil_Err.Add(1);
                        Col_Err.Add(a);
                        Tip_Err.Add("Semántico");
                    }
                }
            }
            int cont = 0;
            for (int a = 0; a < Termi.Count(); a++)
            {
                for (int b = 0; b < IniTerm.Count(); b++)
                {
                    if (Termi[a] == IniTerm[b])
                    {
                        cont++;
                    }
                }
                if (cont == 0)
                {
                    Err.Add(Termi[a]);
                    Desc_Err.Add("Uso de terminal no inicializado");
                    Fil_Err.Add(1);
                    Col_Err.Add(a);
                    Tip_Err.Add("Semántico");
                    cont = 0;
                }
            }
            for(int a = 0; a < Termi.Count; a++)
            {
                
            }
        }
    }
}
